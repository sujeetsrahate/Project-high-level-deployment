
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  AWS CloudFormation template for a microservices infrastructure, including a VPC,
  EKS cluster, Multi-AZ RDS database, CloudWatch logging, Security Groups, NACLs,
  and IAM roles. This self-contained solution excludes ALB and S3.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Networking Configuration
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
      - Label:
          default: Database Configuration
        Parameters:
          - DBInstanceType
          - DBAllocatedStorage
          - DBUser
          - DBPassword
          - DBName
      - Label:
          default: EKS Configuration
        Parameters:
          - EKSClusterName
          - EKSDesiredSize
          - EKSMaxSize
          - EKSMinSize

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for Public Subnet 1.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet 2.
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Private Subnet 1.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for Private Subnet 2.
  DBInstanceType:
    Type: String
    Default: db.t3.micro
    Description: The EC2 instance type for the RDS DB instance.
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t4g.micro
  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: The size of the database (in GiB).
    MinValue: 20
  DBUser:
    Type: String
    NoEcho: true
    Description: Master username for the RDS database.
    Default: dbadmin
  DBPassword:
    Type: String
    NoEcho: true
    Description: Master password for the RDS database. Must be at least 8 characters,
      contain uppercase, lowercase, numbers, and special characters. Allowed characters
      exclude '/', '@', '"', and space.
    Default: MySecurePwd123! # Updated default password to comply with RDS restrictions
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!"#$%&'()*+,\-.:;<=>?\[\\\]^_`{|}~]).{8,41}$ # Updated pattern to exclude /, @, ", space
    ConstraintDescription: Must be at least 8 characters and contain uppercase,
      lowercase, numbers, and special characters. Allowed characters exclude '/', '@', '"', and space.
  DBName:
    Type: String
    Default: mydatabase
    Description: The name of the database.
  EKSClusterName:
    Type: String
    Default: MyEKSCluster
    Description: Name for the EKS Cluster.
  EKSDesiredSize:
    Type: Number
    Default: 2
    Description: Desired number of instances in the EKS Node Group.
  EKSMaxSize:
    Type: Number
    Default: 4
    Description: Maximum number of instances in the EKS Node Group.
  EKSMinSize:
    Type: Number
    Default: 1
    Description: Minimum number of instances in the EKS Node Group.

Resources:
  # IAM Role for EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSClusterRole

  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
        - Key: kubernetes.io/role/elb # Tag for Kubernetes ELB discovery
          Value: 1
        - Key: kubernetes.io/cluster/${EKSClusterName} # Required for EKS to discover subnets
          Value: shared
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
        - Key: kubernetes.io/role/elb # Tag for Kubernetes ELB discovery
          Value: 1
        - Key: kubernetes.io/cluster/${EKSClusterName} # Required for EKS to discover subnets
          Value: shared
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
        - Key: kubernetes.io/role/internal-elb # Tag for Kubernetes internal ELB discovery
          Value: 1
        - Key: kubernetes.io/cluster/${EKSClusterName} # Required for EKS to discover subnets
          Value: shared
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2
        - Key: kubernetes.io/role/internal-elb # Tag for Kubernetes internal ELB discovery
          Value: 1
        - Key: kubernetes.io/cluster/${EKSClusterName} # Required for EKS to discover subnets
          Value: shared

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGatewayEIP
    DependsOn: AttachGateway # Ensure IGW is attached before EIP allocation for NAT Gateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # Placed in Public Subnet 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Network Access Control Lists (NACLs)
  # Basic NACLs allowing all traffic. For production, consider more restrictive rules.
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicNACL
  PublicInboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  PublicOutboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateNACL
  PrivateInboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  PrivateOutboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PublicSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl
  PrivateSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  # Security Groups (Defined without ingress/egress rules initially to break circular dependency)
  SecurityGroupEKSControlPlane:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS control plane API access
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSControlPlaneSG

  SecurityGroupEKSWorkers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS worker nodes
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSWorkersSG

  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow db connection from EKS worker nodes
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSSG

  # EKS Cluster (references SecurityGroupEKSControlPlane)
  MyEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !GetAtt SecurityGroupEKSControlPlane.GroupId
        # EndpointPublicAccess: true # Uncomment and set to false for private-only endpoint
        # EndpointPrivateAccess: false # Uncomment and set to true if you want private-only access
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSCluster

  # EKS Node Group Role
  MyEKSNodegroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # ADDED FOR DEBUGGING
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSNodegroupRole

  # EKS Node Group (references MyEKSCluster and SecurityGroupEKSWorkers)
  MyNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref MyEKSCluster
      NodeRole: !GetAtt MyEKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: !Ref EKSDesiredSize
        MaxSize: !Ref EKSMaxSize
        MinSize: !Ref EKSMinSize
      Labels:
        app: my-app
      Tags:
        Name: !Sub ${AWS::StackName}-EKSNodeGroup
        eks:cluster-name: !Ref EKSClusterName

  # RDS Database (references MyDBSubnetGroup and SecurityGroupRDS)
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSDBSubnetGroup

  MyRDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceType
      Engine: mysql
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: !Ref DBAllocatedStorage
      MultiAZ: true
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt SecurityGroupRDS.GroupId # Associate RDS with its security group
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 03:00-05:00
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSDBInstance

  # CloudWatch Log Group for EKS Cluster logs
  MyEKSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/eks/${EKSClusterName}/cluster
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSLogGroup

  # --- Security Group Ingress and Egress Rules (Defined separately to break dependencies) ---

  # EKS Control Plane Ingress Rule (from EKS Workers)
  EKSControlPlaneIngressFromEKSWorkers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSControlPlane.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      Description: Allow EKS worker nodes to communicate with the control plane API

  # EKS Workers Ingress Rules (from EKS Control Plane and self-traffic)
  EKSWorkersIngressFromEKSControlPlaneAPI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: tcp
      FromPort: 443 # EKS API server port
      ToPort: 443
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSControlPlane.GroupId
      Description: Allow EKS control plane to communicate with worker nodes (API server)
  EKSWorkersIngressFromEKSControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: tcp
      FromPort: 10250 # Kubelet port
      ToPort: 10250
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSControlPlane.GroupId
      Description: Allow EKS control plane to communicate with worker nodes (Kubelet)
  EKSWorkersIngressSelfClusterTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: -1 # All protocols
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      Description: Allow all traffic within the EKS worker nodes security group

  # EKS Workers Egress Rules
  EKSWorkersEgressToEKSControlPlane:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt SecurityGroupEKSControlPlane.GroupId
      Description: Allow outbound to EKS Control Plane API
  EKSWorkersEgressToRDS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: tcp
      FromPort: 3306 # MySQL/Aurora port
      ToPort: 3306
      DestinationSecurityGroupId: !GetAtt SecurityGroupRDS.GroupId
      Description: Allow outbound to RDS database
  EKSWorkersEgressToInternet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: -1 # All protocols
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
      Description: Allow all outbound internet traffic (via NAT Gateway)

  # RDS Ingress Rule (from EKS Workers)
  RDSIngressFromEKSWorkers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupRDS.GroupId
      IpProtocol: tcp
      FromPort: 3306 # Default MySQL/Aurora port
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      Description: Allow MySQL traffic from EKS worker nodes

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref MyVPC
  PublicSubnet1Id:
    Description: The ID of Public Subnet 1
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: The ID of Public Subnet 2
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: The ID of Private Subnet 1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: The ID of Private Subnet 2
    Value: !Ref PrivateSubnet2
  RDSDBEndpointAddress:
    Description: The address of the RDS database endpoint
    Value: !GetAtt MyRDSDB.Endpoint.Address
  RDSDBEndpointPort:
    Description: The port of the RDS database endpoint
    Value: !GetAtt MyRDSDB.Endpoint.Port
  EKSClusterName:
    Description: The name of the EKS Cluster
    Value: !Ref MyEKSCluster
  EKSClusterEndpoint:
    Description: The endpoint of the EKS Cluster API
    Value: !GetAtt MyEKSCluster.Endpoint
  EKSControlPlaneSecurityGroupId:
    Description: The Security Group ID for the EKS Control Plane.
    Value: !GetAtt SecurityGroupEKSControlPlane.GroupId
  EKSWorkerSecurityGroupId:
    Description: The Security Group ID for the EKS Worker Nodes.
    Value: !GetAtt SecurityGroupEKSWorkers.GroupId
